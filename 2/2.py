# Функциональная парадигма.
#
# Имутабельность:
# Нет изменения состояний (например, переменных или структуры данных) после их создания.
# Каждая функция возвращает новый результат, не влияя на внешнюю среду.
#
# Модульность:
# Код разделён на небольшие функции: генерацию строки,
# генерацию таблицы и вывод на экран. Это делает код легко читаемым и тестируемым.
#
# Использование выражений:
# Генерация данных выполняется через списки (list comprehensions),
# которые являются декларативным способом описания структур данных.

# Функция для генерации одной строки таблицы умножения
def generate_row(i, n):
    return [f"{i} * {j} = {i * j}" for j in range(1, n + 1)]


# Функция для генерации всей таблицы умножения
def generate_table(n):
    return [generate_row(i, n) for i in range(1, n + 1)]


# Функция для вывода таблицы на экран
def print_table(table):
    print("\n\n".join("\n".join(row) for row in table))


n = int(input("Введите число n: "))
table = generate_table(n)
print_table(table)
